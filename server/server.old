#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h> // sleep()
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <string.h> // strcpy, strcmp
#include <math.h>
#include <semaphore.h>
#include <server.h>

void tcp_init(int sock);
void *TCP(void *p);
void *UDP(void *p);


int packetsize, filesize, number_packets;


int msg_size = 100; // 100 bytes

struct Message_Queue {
    int id;
    char *message;
    char *data;
    int data_len;
    struct Message_Queue *next_message;
} *MQhead,*MQtail,*MQsent,*MQtemp,*position, *previous, *next;


struct sockaddr_in server, client; // UDP

sem_t mutex;
sem_t window;

int ack_window;


void send_next(int socket) { // send next message from queue

        int sent = 0;

        if (MQhead != NULL) {
            /* send off message at the head of the message queue */
        //  printf("Data length: %d\n", MQhead->data_len);


            char id[11]; // string to represent number and comma
            sprintf(id, "%d,", MQhead->id); // convert integer count to string and save to char array 'id'

       //     int data_length = 1 + strlen(MQhead->data + 1);
           

            char *message = malloc( sizeof(char) * MQhead->data_len + strlen(id));
            
            memcpy(message,id,strlen(id));
      
            char *c;
            c = &message[strlen(id)]; // point c to position after comma
            memcpy(c, MQhead->data, MQhead->data_len); // copy data

            while(1) { // wait to be able to send
                
                if (ack_window > 0) {
                    printf("Sending %d\n",MQhead->id);
                    int err = sendto(socket, message, MQhead->data_len + strlen(id), 0, (struct sockaddr*) &client, sizeof(client));
                    if (err < 0) { printf("sendto error"); perror("error"); exit(0) ; }
                    sem_wait(&window);
                    ack_window--;
                    sem_post(&window);
                    break;
                } else {
                    printf("waiting on more ACKs before sending\n");
                }

            }
                

            /* temporary congestion control */
       //     if (MQhead->id % 50 == 0) {
       //         sleep(1);
       //     }  

            /* preserve head (message sent) */
            MQtemp = MQhead;
            
            /* move head down by one so next time send_next is called we will have a new message */
            MQhead = MQhead->next_message;

            /* pass to MQtemp to send_queue_add() // messages in the MQSent linked list can be freed or re-sent, later */
            MQtemp->next_message = NULL; 
             
            /*   add to sent list */
              sem_wait(&mutex); // release
              sent_list_add(MQtemp);
              sem_post(&mutex); // release
            
        }

        
}

void sent_list_add(struct Message_Queue *Add) {

    /* add message to send_list in ascending order of message id */

   

    position = MQsent;

    if (MQsent == NULL) {
        MQsent = Add;
//          printf("Linked %d at head of sent list\n", Add->id);
      
    } else {

        while(position->next_message != NULL) {
        //    printf("Moving down sent list\n");
            position = position->next_message;
        }

        position->next_message = Add; // link at end
 //        printf("Linked %d at end of sent list\n", Add->id);

    }

    

  

} // end send_cached_add(...)
void sent_list_remove(int id) {

    /*
   * Visit each node, maintaining a pointer to
   * the previous node we just visited.
   */
  for (position = MQsent;
    position != NULL;
    previous = position, position = position->next_message) {

    if (position->id == id) {  /* Found it. */
      if (previous == NULL) {
        /* Fix beginning pointer. */
        MQsent = position->next_message;
      } else {
        /*
         * Fix previous node's next to
         * skip over the removed node.
         */
        previous->next_message = position->next_message;
      }

      /* Deallocate the node. */
      printf("Freeing message %d from sent list\n",id);
      free(position);

      /* Done searching. */
      return;
    }
  }


   


}

void sent_list_resend(int id) {
     /*
   * Visit each node, maintaining a pointer to
   * the previous node we just visited.
   */
  for (position = MQsent;
    position != NULL;
    previous = position, position = position->next_message) {

    if (position->id == id) {  /* Found it. */
      if (previous == NULL) {
        /* Fix beginning pointer. */
        MQsent = position->next_message;
      } else {
        /*
         * Fix previous node's next to
         * skip over the removed node.
         */
        previous->next_message = position->next_message;
      }

      /* Deallocate the node. */
      printf("Resending %d\n",id);
      message_queue_add(position);

      /* Done searching. */
      return;
    }
  }
}

void message_queue_add(struct Message_Queue *Add) {

  

    printf("Added message id %d\n",Add->id);

    if (MQtail == NULL) { // if there isn't a message in place on the queue
        MQhead = Add;
        MQtail = Add;
   //     printf("message added to message queue (first message)\n");

  } else {

        MQtail->next_message = Add; // link message at end of list
        MQtail = MQtail->next_message; // update tail to point to tail of list
    //    printf("message added to tail of message queue\n");
  }



}
void *Message_Handler(void *p) {
    /* Open the file that we wish to transfer */
        FILE *fp = fopen("sample.txt","rb");
        if(fp==NULL) {
            printf("File open error");
            exit(0);
        } else { printf("File opened\n"); }

        /* get file size by seeking to the end of the file */
        fseek(fp, 0L, SEEK_END);
        filesize = ftell(fp);
        number_packets = (filesize + 1024 - 1) / 1024;  // take ceiling of (filesize / 10)

        /* return to beginning of file */

        fseek(fp, 0L, SEEK_SET);

    int count = 1; // variable to id each packet, packets start at 1

    while(1) {       
            char input_buff[1024]={0}; // input buffer to save each chunk read from file
       //     char output_buff[100] = {0}; // output buffer consisting of id+data
            int nread = fread(input_buff, 1 , sizeof(input_buff), fp); // reach in 10 bytes and store to input_buff
            if (nread > 0) { // if data read has any size

           //     printf("Bytes read %d \n", nread);        
                MQtemp = (struct Message_Queue *) malloc (sizeof (struct Message_Queue)); // create temp struct
                MQtemp->id = count; // set integer id
                MQtemp->data = malloc( sizeof(char) * ( nread ));
                memcpy(MQtemp->data, input_buff, nread); // copy nreads bytes of data from input_buff to struct
                MQtemp->data_len = nread;
                message_queue_add(MQtemp);
                count++; // increase packet count id
            } 

            if (nread < sizeof(input_buff))
            {
                if (feof(fp))
                    printf("End of file\n");
                if (ferror(fp))
                    printf("Error reading\n");
                break;
            }
        } 
}






